'''
Neuron simulator export for:

Components:
    kd (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: include)
    cell (Type: cell)
    null (Type: include)
    null (Type: include)
    iclamp0 (Type: pulseGenerator:  delay=0.1 (SI time) duration=0.1 (SI time) amplitude=-2.0000000000000002E-11 (SI current))
    iclamp1 (Type: pulseGenerator:  delay=0.2 (SI time) duration=0.2 (SI time) amplitude=2.0000000000000002E-11 (SI current))
    net (Type: networkWithTemperature:  temperature=297.15 (SI temperature))
    sim1 (Type: Simulation:  length=0.5 (SI time) step=1.0E-6 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.6
         org.neuroml.model   v1.4.6
         jLEMS               v0.9.8.6

'''

import neuron

import time
h = neuron.h
h.load_file("nrngui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt):

        print("\n    Starting simulation in NEURON generated from NeuroML2 model...\n")

        # Adding simulation Component(id=sim1 type=Simulation) of network/component: net (Type: networkWithTemperature:  temperature=297.15 (SI temperature))

        # Temperature used for network: 297.15 K
        h.celsius = 297.15 - 273.15

        print("Population pop contains 1 instance(s) of component: cell of type: cell")

        h.load_file("cell.hoc")
        a_pop = []
        h("{ n_pop = 1 }")
        h("objectvar a_pop[n_pop]")
        for i in range(int(h.n_pop)):
            h("a_pop[%i] = new cell()"%i)
            h("access a_pop[%i].soma"%i)

        h("{ a_pop[0].position(0, 0, 0) }")

        h("proc initialiseV_pop() { for i = 0, n_pop-1 { a_pop[i].set_initial_v() } }")
        h("objref fih_pop")
        h('{fih_pop = new FInitializeHandler(0, "initialiseV_pop()")}')

        h("proc initialiseIons_pop() { for i = 0, n_pop-1 { a_pop[i].set_initial_ion_properties() } }")
        h("objref fih_ion_pop")
        h('{fih_ion_pop = new FInitializeHandler(1, "initialiseIons_pop()")}')

        # Adding input: Component(id=0 type=input)

        h("objref Clamps_0")
        h("a_pop[0].soma { Clamps_0 = new iclamp0(0.500000) } ")

        # Adding input: Component(id=1 type=input)

        h("objref Clamps_1")
        h("a_pop[0].soma { Clamps_1 = new iclamp1(0.500000) } ")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt

        # Display: self.display_d1
        self.display_d1 = h.Graph(0)
        self.display_d1.size(0,h.tstop,-80.0,50.0)
        self.display_d1.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
        h.graphList[0].append(self.display_d1)
        # Line, plotting: pop/0/cell/v
        self.display_d1.addexpr("a_pop[0].soma.v(0.5)", "a_pop[0].soma.v(0.5)", 1, 1, 0.8, 0.9, 2)



        # File to save: outf
        # Column: pop/0/cell/v
        h(' objectvar v_v_outf ')
        h(' { v_v_outf = new Vector() } ')
        h(' { v_v_outf.record(&a_pop[0].soma.v(0.5)) } ')
        h.v_v_outf.resize((h.tstop * h.steps_per_ms) + 1)

        # File to save: time
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        h.nrncontrolmenu()


    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms)" % (h.tstop, h.dt))

        h.run()

        self.sim_end = time.time()
        sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(sim_time, sim_time/60.0))

        self.save_results()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()

        self.display_d1.exec_menu("View = plot")

        # File to save: time
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        for i in range(int(h.tstop * h.steps_per_ms) + 1):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...+ '\n')
        f_time_f2.close()
        print("Saved data to: time.dat")

        # File to save: outf
        py_v_v_outf = [ float(x  / 1000.0) for x in h.v_v_outf.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_outf_f2 = open('jlems_generated_sccct.dat', 'w')
        for i in range(int(h.tstop * h.steps_per_ms) + 1):
            f_outf_f2.write('%e\t'% py_v_time[i]  + '%e\t'%(py_v_v_outf[i]) + '\n')
        f_outf_f2.close()
        print("Saved data to: jlems_generated_sccct.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

if __name__ == '__main__':

    ns = NeuronSimulation(tstop=500 , dt=0.001)

    ns.run()

